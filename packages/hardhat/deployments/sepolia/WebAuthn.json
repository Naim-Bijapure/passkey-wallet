{
  "address": "0xf360FA36ac1b0EE6a28D1a0cf0F1C73f5F2AD941",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidAuthenticatorData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidClientData",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidSignature",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y1",
          "type": "uint256"
        }
      ],
      "name": "add",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y2",
          "type": "uint256"
        }
      ],
      "name": "addAndReturnProjectivePoint",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "P",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "x1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z1",
          "type": "uint256"
        }
      ],
      "name": "addProj",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y2",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z2",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "authenticatorData",
          "type": "bytes"
        },
        {
          "internalType": "bytes1",
          "name": "authenticatorDataFlagMask",
          "type": "bytes1"
        },
        {
          "internalType": "bytes",
          "name": "clientData",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "clientChallenge",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "clientChallengeDataOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "rs",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "coordinates",
          "type": "uint256[2]"
        }
      ],
      "name": "checkSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "decodeSignature",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "bytes1",
          "name": "",
          "type": "bytes1"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "",
          "type": "uint256[2]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "_signature",
          "type": "bytes"
        }
      ],
      "name": "getChallenge",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "name": "isOnCurve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y0",
          "type": "uint256"
        }
      ],
      "name": "isZeroCurve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isZero",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scalar",
          "type": "uint256"
        }
      ],
      "name": "multiplyScalar",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z0",
          "type": "uint256"
        }
      ],
      "name": "toAffinePoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y0",
          "type": "uint256"
        }
      ],
      "name": "toProjectivePoint",
      "outputs": [
        {
          "internalType": "uint256[3]",
          "name": "P",
          "type": "uint256[3]"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y0",
          "type": "uint256"
        }
      ],
      "name": "twice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "x0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y0",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z0",
          "type": "uint256"
        }
      ],
      "name": "twiceProj",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y1",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z1",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "authenticatorData",
          "type": "bytes"
        },
        {
          "internalType": "bytes1",
          "name": "authenticatorDataFlagMask",
          "type": "bytes1"
        },
        {
          "internalType": "bytes",
          "name": "clientData",
          "type": "bytes"
        },
        {
          "internalType": "string",
          "name": "clientChallenge",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "clientChallengeDataOffset",
          "type": "uint256"
        },
        {
          "internalType": "uint256[2]",
          "name": "rs",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "coordinates",
          "type": "uint256[2]"
        }
      ],
      "name": "validate",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "message",
          "type": "bytes32"
        },
        {
          "internalType": "uint256[2]",
          "name": "rs",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "Q",
          "type": "uint256[2]"
        }
      ],
      "name": "validateSignature",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroAffine",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "zeroProj",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "x",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "y",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "z",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x7e9ddc9994310ae930fd3ade5892fcd831bcfc6a9912b0b5b00faa14c5aa59a8",
  "receipt": {
    "to": null,
    "from": "0x0fAb64624733a7020D332203568754EB1a37DB89",
    "contractAddress": "0xf360FA36ac1b0EE6a28D1a0cf0F1C73f5F2AD941",
    "transactionIndex": 143,
    "gasUsed": "1361055",
    "logsBloom": "0x
    "blockHash": "0x9caece25486fef15156e74633b27279fdb8217876120cab52f8b0aa6d69c2e5d",
    "transactionHash": "0x7e9ddc9994310ae930fd3ade5892fcd831bcfc6a9912b0b5b00faa14c5aa59a8",
    "logs": [],
    "blockNumber": 5260076,
    "cumulativeGasUsed": "17158187",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "e7e4c5b7cd71b86108eb867652a35fa9",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidAuthenticatorData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidClientData\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"}],\"name\":\"add\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y2\",\"type\":\"uint256\"}],\"name\":\"addAndReturnProjectivePoint\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"P\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"x1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z1\",\"type\":\"uint256\"}],\"name\":\"addProj\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y2\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z2\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"authenticatorData\",\"type\":\"bytes\"},{\"internalType\":\"bytes1\",\"name\":\"authenticatorDataFlagMask\",\"type\":\"bytes1\"},{\"internalType\":\"bytes\",\"name\":\"clientData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"clientChallenge\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"clientChallengeDataOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"rs\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"coordinates\",\"type\":\"uint256[2]\"}],\"name\":\"checkSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"decodeSignature\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"bytes1\",\"name\":\"\",\"type\":\"bytes1\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"\",\"type\":\"uint256[2]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"_signature\",\"type\":\"bytes\"}],\"name\":\"getChallenge\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"name\":\"isOnCurve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\"}],\"name\":\"isZeroCurve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isZero\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scalar\",\"type\":\"uint256\"}],\"name\":\"multiplyScalar\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z0\",\"type\":\"uint256\"}],\"name\":\"toAffinePoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\"}],\"name\":\"toProjectivePoint\",\"outputs\":[{\"internalType\":\"uint256[3]\",\"name\":\"P\",\"type\":\"uint256[3]\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\"}],\"name\":\"twice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"x0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y0\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z0\",\"type\":\"uint256\"}],\"name\":\"twiceProj\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z1\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"authenticatorData\",\"type\":\"bytes\"},{\"internalType\":\"bytes1\",\"name\":\"authenticatorDataFlagMask\",\"type\":\"bytes1\"},{\"internalType\":\"bytes\",\"name\":\"clientData\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"clientChallenge\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"clientChallengeDataOffset\",\"type\":\"uint256\"},{\"internalType\":\"uint256[2]\",\"name\":\"rs\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"coordinates\",\"type\":\"uint256[2]\"}],\"name\":\"validate\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"message\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[2]\",\"name\":\"rs\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Q\",\"type\":\"uint256[2]\"}],\"name\":\"validateSignature\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroAffine\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"zeroProj\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"x\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"y\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"z\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,uint256,uint256,uint256)\":{\"details\":\"Add two elliptic curve points in affine coordinates.\"},\"addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)\":{\"details\":\"Add two points in affine coordinates and return projective point.\"},\"addProj(uint256,uint256,uint256,uint256,uint256,uint256)\":{\"details\":\"Add two elliptic curve points in projective coordinates. See https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates\"},\"isOnCurve(uint256,uint256)\":{\"details\":\"Check if a point in affine coordinates is on the curve.\"},\"isZeroCurve(uint256,uint256)\":{\"details\":\"Check if the curve is the zero curve.\"},\"multiplyScalar(uint256,uint256,uint256)\":{\"details\":\"Multiply an elliptic curve point by a scalar.\"},\"toAffinePoint(uint256,uint256,uint256)\":{\"details\":\"Transform from projective to affine coordinates.\"},\"toProjectivePoint(uint256,uint256)\":{\"details\":\"Transform affine coordinates into projective coordinates.\"},\"twice(uint256,uint256)\":{\"details\":\"Double an elliptic curve point in affine coordinates.\"},\"twiceProj(uint256,uint256,uint256)\":{\"details\":\"Double an elliptic curve point in projective coordinates. See https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates\"},\"validateSignature(bytes32,uint256[2],uint256[2])\":{\"details\":\"Validate combination of message, signature, and public key.\"},\"zeroAffine()\":{\"details\":\"Return the zero curve in affine coordinates.\"},\"zeroProj()\":{\"details\":\"Return the zero curve in projective coordinates.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/webauthn/WebAuthn.sol\":\"WebAuthn\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/webauthn/EllipticCurve.sol\":{\"content\":\"//SPDX-License-Identifier: UNLICENSED\\npragma solidity >=0.8.0;\\n\\n/**\\n * @title   EllipticCurve\\n *\\n * @author  Tilman Drerup;\\n *\\n * @notice  Implements elliptic curve math; Parametrized for SECP256R1.\\n *\\n *          Includes components of code by Andreas Olofsson, Alexander Vlasov\\n *          (https://github.com/BANKEX/CurveArithmetics), and Avi Asayag\\n *          (https://github.com/orbs-network/elliptic-curve-solidity)\\n *\\n * @dev     NOTE: To disambiguate public keys when verifying signatures, activate\\n *          condition 'rs[1] > lowSmax' in validateSignature().\\n */\\ncontract EllipticCurve {\\n    // Set parameters for curve.\\n    uint256 constant a =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFC;\\n    uint256 constant b =\\n        0x5AC635D8AA3A93E7B3EBBD55769886BC651D06B0CC53B0F63BCE3C3E27D2604B;\\n    uint256 constant gx =\\n        0x6B17D1F2E12C4247F8BCE6E563A440F277037D812DEB33A0F4A13945D898C296;\\n    uint256 constant gy =\\n        0x4FE342E2FE1A7F9B8EE7EB4A7C0F9E162BCE33576B315ECECBB6406837BF51F5;\\n    uint256 constant p =\\n        0xFFFFFFFF00000001000000000000000000000000FFFFFFFFFFFFFFFFFFFFFFFF;\\n    uint256 constant n =\\n        0xFFFFFFFF00000000FFFFFFFFFFFFFFFFBCE6FAADA7179E84F3B9CAC2FC632551;\\n    uint256 constant lowSmax =\\n        0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0;\\n\\n    /**\\n     * @dev Inverse of u in the field of modulo m.\\n     */\\n    function inverseMod(uint256 u, uint256 m) internal pure returns (uint256) {\\n        if (u == 0 || u == m || m == 0) return 0;\\n        if (u > m) u = u % m;\\n\\n        int256 t1;\\n        int256 t2 = 1;\\n        uint256 r1 = m;\\n        uint256 r2 = u;\\n        uint256 q;\\n        unchecked {\\n            while (r2 != 0) {\\n                q = r1 / r2;\\n                (t1, t2, r1, r2) = (t2, t1 - int256(q) * t2, r2, r1 - q * r2);\\n            }\\n\\n            if (t1 < 0) return (m - uint256(-t1));\\n\\n            return uint256(t1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transform affine coordinates into projective coordinates.\\n     */\\n    function toProjectivePoint(\\n        uint256 x0,\\n        uint256 y0\\n    ) public pure returns (uint256[3] memory P) {\\n        unchecked {\\n            P[2] = addmod(0, 1, p);\\n            P[0] = mulmod(x0, P[2], p);\\n            P[1] = mulmod(y0, P[2], p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add two points in affine coordinates and return projective point.\\n     */\\n    function addAndReturnProjectivePoint(\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 x2,\\n        uint256 y2\\n    ) public pure returns (uint256[3] memory P) {\\n        uint256 x;\\n        uint256 y;\\n        unchecked {\\n            (x, y) = add(x1, y1, x2, y2);\\n        }\\n        P = toProjectivePoint(x, y);\\n    }\\n\\n    /**\\n     * @dev Transform from projective to affine coordinates.\\n     */\\n    function toAffinePoint(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 z0\\n    ) public pure returns (uint256 x1, uint256 y1) {\\n        uint256 z0Inv;\\n        unchecked {\\n            z0Inv = inverseMod(z0, p);\\n            x1 = mulmod(x0, z0Inv, p);\\n            y1 = mulmod(y0, z0Inv, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the zero curve in projective coordinates.\\n     */\\n    function zeroProj() public pure returns (uint256 x, uint256 y, uint256 z) {\\n        return (0, 1, 0);\\n    }\\n\\n    /**\\n     * @dev Return the zero curve in affine coordinates.\\n     */\\n    function zeroAffine() public pure returns (uint256 x, uint256 y) {\\n        return (0, 0);\\n    }\\n\\n    /**\\n     * @dev Check if the curve is the zero curve.\\n     */\\n    function isZeroCurve(\\n        uint256 x0,\\n        uint256 y0\\n    ) public pure returns (bool isZero) {\\n        if (x0 == 0 && y0 == 0) {\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Check if a point in affine coordinates is on the curve.\\n     */\\n    function isOnCurve(uint256 x, uint256 y) public pure returns (bool) {\\n        if (0 == x || x == p || 0 == y || y == p) {\\n            return false;\\n        }\\n\\n        unchecked {\\n            uint256 LHS = mulmod(y, y, p); // y^2\\n            uint256 RHS = mulmod(mulmod(x, x, p), x, p); // x^3\\n\\n            if (a != 0) {\\n                RHS = addmod(RHS, mulmod(x, a, p), p); // x^3 + a*x\\n            }\\n            if (b != 0) {\\n                RHS = addmod(RHS, b, p); // x^3 + a*x + b\\n            }\\n\\n            return LHS == RHS;\\n        }\\n    }\\n\\n    /**\\n     * @dev Double an elliptic curve point in projective coordinates. See\\n     * https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates\\n     */\\n    function twiceProj(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 z0\\n    ) public pure returns (uint256 x1, uint256 y1, uint256 z1) {\\n        uint256 t;\\n        uint256 u;\\n        uint256 v;\\n        uint256 w;\\n\\n        if (isZeroCurve(x0, y0)) {\\n            return zeroProj();\\n        }\\n        unchecked {\\n            u = mulmod(y0, z0, p);\\n            u = mulmod(u, 2, p);\\n\\n            v = mulmod(u, x0, p);\\n            v = mulmod(v, y0, p);\\n            v = mulmod(v, 2, p);\\n\\n            x0 = mulmod(x0, x0, p);\\n            t = mulmod(x0, 3, p);\\n\\n            z0 = mulmod(z0, z0, p);\\n            z0 = mulmod(z0, a, p);\\n            t = addmod(t, z0, p);\\n\\n            w = mulmod(t, t, p);\\n            x0 = mulmod(2, v, p);\\n            w = addmod(w, p - x0, p);\\n\\n            x0 = addmod(v, p - w, p);\\n            x0 = mulmod(t, x0, p);\\n            y0 = mulmod(y0, u, p);\\n            y0 = mulmod(y0, y0, p);\\n            y0 = mulmod(2, y0, p);\\n            y1 = addmod(x0, p - y0, p);\\n\\n            x1 = mulmod(u, w, p);\\n\\n            z1 = mulmod(u, u, p);\\n            z1 = mulmod(z1, u, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add two elliptic curve points in projective coordinates. See\\n     * https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates\\n     */\\n    function addProj(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 z0,\\n        uint256 x1,\\n        uint256 y1,\\n        uint256 z1\\n    ) public pure returns (uint256 x2, uint256 y2, uint256 z2) {\\n        uint256 t0;\\n        uint256 t1;\\n        uint256 u0;\\n        uint256 u1;\\n\\n        if (isZeroCurve(x0, y0)) {\\n            return (x1, y1, z1);\\n        } else if (isZeroCurve(x1, y1)) {\\n            return (x0, y0, z0);\\n        }\\n        unchecked {\\n            t0 = mulmod(y0, z1, p);\\n            t1 = mulmod(y1, z0, p);\\n\\n            u0 = mulmod(x0, z1, p);\\n            u1 = mulmod(x1, z0, p);\\n        }\\n        if (u0 == u1) {\\n            if (t0 == t1) {\\n                return twiceProj(x0, y0, z0);\\n            } else {\\n                return zeroProj();\\n            }\\n        }\\n        unchecked {\\n            (x2, y2, z2) = addProj2(mulmod(z0, z1, p), u0, u1, t1, t0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Helper function that splits addProj to avoid too many local variables.\\n     */\\n    function addProj2(\\n        uint256 v,\\n        uint256 u0,\\n        uint256 u1,\\n        uint256 t1,\\n        uint256 t0\\n    ) private pure returns (uint256 x2, uint256 y2, uint256 z2) {\\n        uint256 u;\\n        uint256 u2;\\n        uint256 u3;\\n        uint256 w;\\n        uint256 t;\\n\\n        unchecked {\\n            t = addmod(t0, p - t1, p);\\n            u = addmod(u0, p - u1, p);\\n            u2 = mulmod(u, u, p);\\n\\n            w = mulmod(t, t, p);\\n            w = mulmod(w, v, p);\\n            u1 = addmod(u1, u0, p);\\n            u1 = mulmod(u1, u2, p);\\n            w = addmod(w, p - u1, p);\\n\\n            x2 = mulmod(u, w, p);\\n\\n            u3 = mulmod(u2, u, p);\\n            u0 = mulmod(u0, u2, p);\\n            u0 = addmod(u0, p - w, p);\\n            t = mulmod(t, u0, p);\\n            t0 = mulmod(t0, u3, p);\\n\\n            y2 = addmod(t, p - t0, p);\\n\\n            z2 = mulmod(u3, v, p);\\n        }\\n    }\\n\\n    /**\\n     * @dev Add two elliptic curve points in affine coordinates.\\n     */\\n    function add(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 x1,\\n        uint256 y1\\n    ) public pure returns (uint256, uint256) {\\n        uint256 z0;\\n\\n        (x0, y0, z0) = addProj(x0, y0, 1, x1, y1, 1);\\n\\n        return toAffinePoint(x0, y0, z0);\\n    }\\n\\n    /**\\n     * @dev Double an elliptic curve point in affine coordinates.\\n     */\\n    function twice(\\n        uint256 x0,\\n        uint256 y0\\n    ) public pure returns (uint256, uint256) {\\n        uint256 z0;\\n\\n        (x0, y0, z0) = twiceProj(x0, y0, 1);\\n\\n        return toAffinePoint(x0, y0, z0);\\n    }\\n\\n    /**\\n     * @dev Multiply an elliptic curve point by a scalar.\\n     */\\n    function multiplyScalar(\\n        uint256 x0,\\n        uint256 y0,\\n        uint256 scalar\\n    ) public pure returns (uint256 x1, uint256 y1) {\\n        if (scalar == 0) {\\n            return zeroAffine();\\n        } else if (scalar == 1) {\\n            return (x0, y0);\\n        } else if (scalar == 2) {\\n            return twice(x0, y0);\\n        }\\n\\n        uint256 base2X = x0;\\n        uint256 base2Y = y0;\\n        uint256 base2Z = 1;\\n        uint256 z1 = 1;\\n        x1 = x0;\\n        y1 = y0;\\n\\n        if (scalar % 2 == 0) {\\n            x1 = y1 = 0;\\n        }\\n\\n        scalar = scalar >> 1;\\n\\n        while (scalar > 0) {\\n            (base2X, base2Y, base2Z) = twiceProj(base2X, base2Y, base2Z);\\n\\n            if (scalar % 2 == 1) {\\n                (x1, y1, z1) = addProj(base2X, base2Y, base2Z, x1, y1, z1);\\n            }\\n\\n            scalar = scalar >> 1;\\n        }\\n\\n        return toAffinePoint(x1, y1, z1);\\n    }\\n\\n    /**\\n     * @dev Validate combination of message, signature, and public key.\\n     */\\n    function validateSignature(\\n        bytes32 message,\\n        uint256[2] memory rs,\\n        uint256[2] memory Q\\n    ) public pure returns (bool) {\\n        // To disambiguate between public key solutions, include comment below.\\n        if (rs[0] == 0 || rs[0] >= n || rs[1] == 0) {\\n            // || rs[1] > lowSmax)\\n            return false;\\n        }\\n\\n        if (!isOnCurve(Q[0], Q[1])) {\\n            return false;\\n        }\\n\\n        uint256 x1;\\n        uint256 x2;\\n        uint256 y1;\\n        uint256 y2;\\n\\n        uint256 sInv = inverseMod(rs[1], n);\\n        (x1, y1) = multiplyScalar(gx, gy, mulmod(uint256(message), sInv, n));\\n        (x2, y2) = multiplyScalar(Q[0], Q[1], mulmod(rs[0], sInv, n));\\n        uint256[3] memory P = addAndReturnProjectivePoint(x1, y1, x2, y2);\\n\\n        if (P[2] == 0) {\\n            return false;\\n        }\\n\\n        uint256 Px = inverseMod(P[2], p);\\n        unchecked {\\n            Px = mulmod(P[0], mulmod(Px, Px, p), p);\\n        }\\n\\n        return Px % n == rs[0];\\n    }\\n}\",\"keccak256\":\"0x9d91aa7daae44f66674280d8113da712b1c7c35ec038c0ef30d257f2b2c36f59\",\"license\":\"UNLICENSED\"},\"contracts/webauthn/WebAuthn.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\npragma solidity >=0.8.0;\\n\\nimport { EllipticCurve } from \\\"./EllipticCurve.sol\\\";\\n\\nerror InvalidAuthenticatorData();\\nerror InvalidClientData();\\nerror InvalidSignature();\\n\\ncontract WebAuthn is EllipticCurve {\\n\\tfunction checkSignature(\\n\\t\\tbytes memory authenticatorData,\\n\\t\\tbytes1 authenticatorDataFlagMask,\\n\\t\\tbytes memory clientData,\\n\\t\\tstring memory clientChallenge,\\n\\t\\tuint clientChallengeDataOffset,\\n\\t\\tuint[2] memory rs,\\n\\t\\tuint[2] memory coordinates\\n\\t) public pure returns (bool) {\\n\\t\\t// Let the caller check if User Presence (0x01) or User Verification (0x04) are set\\n\\t\\tif (\\n\\t\\t\\t(authenticatorData[32] & authenticatorDataFlagMask) !=\\n\\t\\t\\tauthenticatorDataFlagMask\\n\\t\\t) {\\n\\t\\t\\trevert InvalidAuthenticatorData();\\n\\t\\t}\\n\\n\\t\\tbytes memory challengeExtracted = new bytes(\\n\\t\\t\\tbytes(clientChallenge).length\\n\\t\\t);\\n\\n\\t\\tcopyBytes(\\n\\t\\t\\tclientData,\\n\\t\\t\\tclientChallengeDataOffset,\\n\\t\\t\\tchallengeExtracted.length,\\n\\t\\t\\tchallengeExtracted,\\n\\t\\t\\t0\\n\\t\\t);\\n\\n\\t\\tif (\\n\\t\\t\\tkeccak256(abi.encodePacked(bytes(clientChallenge))) !=\\n\\t\\t\\tkeccak256(abi.encodePacked(challengeExtracted))\\n\\t\\t) {\\n\\t\\t\\trevert InvalidClientData();\\n\\t\\t}\\n\\n\\t\\t// Verify the signature over sha256(authenticatorData || sha256(clientData))\\n\\t\\tbytes memory verifyData = new bytes(authenticatorData.length + 32);\\n\\n\\t\\tcopyBytes(\\n\\t\\t\\tauthenticatorData,\\n\\t\\t\\t0,\\n\\t\\t\\tauthenticatorData.length,\\n\\t\\t\\tverifyData,\\n\\t\\t\\t0\\n\\t\\t);\\n\\n\\t\\tcopyBytes(\\n\\t\\t\\tabi.encodePacked(sha256(clientData)),\\n\\t\\t\\t0,\\n\\t\\t\\t32,\\n\\t\\t\\tverifyData,\\n\\t\\t\\tauthenticatorData.length\\n\\t\\t);\\n\\n\\t\\tbytes32 message = sha256(verifyData);\\n\\t\\t//return EllipticCurve.validateSignature(message, rs, coordinates);\\n\\t\\treturn validateSignature(message, rs, coordinates);\\n\\t}\\n\\n\\tfunction validate(\\n\\t\\tbytes memory authenticatorData,\\n\\t\\tbytes1 authenticatorDataFlagMask,\\n\\t\\tbytes memory clientData,\\n\\t\\tstring memory clientChallenge,\\n\\t\\tuint clientChallengeDataOffset,\\n\\t\\tuint[2] memory rs,\\n\\t\\tuint[2] memory coordinates\\n\\t) public pure returns (bool) {\\n\\t\\tif (\\n\\t\\t\\t!checkSignature(\\n\\t\\t\\t\\tauthenticatorData,\\n\\t\\t\\t\\tauthenticatorDataFlagMask,\\n\\t\\t\\t\\tclientData,\\n\\t\\t\\t\\tclientChallenge,\\n\\t\\t\\t\\tclientChallengeDataOffset,\\n\\t\\t\\t\\trs,\\n\\t\\t\\t\\tcoordinates\\n\\t\\t\\t)\\n\\t\\t) {\\n\\t\\t\\trevert InvalidSignature();\\n\\t\\t}\\n\\t\\treturn true;\\n\\t}\\n\\n\\t/*\\n    The following function has been written by Alex Beregszaszi (@axic), use it under the terms of the MIT license\\n  */\\n\\tfunction copyBytes(\\n\\t\\tbytes memory _from,\\n\\t\\tuint _fromOffset,\\n\\t\\tuint _length,\\n\\t\\tbytes memory _to,\\n\\t\\tuint _toOffset\\n\\t) internal pure returns (bytes memory _copiedBytes) {\\n\\t\\tuint minLength = _length + _toOffset;\\n\\t\\trequire(_to.length >= minLength); // Buffer too small. Should be a better way?\\n\\t\\tuint i = 32 + _fromOffset; // NOTE: the offset 32 is added to skip the `size` field of both bytes variables\\n\\t\\tuint j = 32 + _toOffset;\\n\\t\\twhile (i < (32 + _fromOffset + _length)) {\\n\\t\\t\\tassembly {\\n\\t\\t\\t\\tlet tmp := mload(add(_from, i))\\n\\t\\t\\t\\tmstore(add(_to, j), tmp)\\n\\t\\t\\t}\\n\\t\\t\\ti += 32;\\n\\t\\t\\tj += 32;\\n\\t\\t}\\n\\t\\treturn _to;\\n\\t}\\n\\n\\tfunction decodeSignature(\\n\\t\\tbytes memory _signature\\n\\t)\\n\\t\\tpublic\\n\\t\\tpure\\n\\t\\treturns (\\n\\t\\t\\tbytes memory,\\n\\t\\t\\tbytes1,\\n\\t\\t\\tbytes memory,\\n\\t\\t\\tstring memory,\\n\\t\\t\\tuint,\\n\\t\\t\\tuint[2] memory\\n\\t\\t)\\n\\t{\\n\\t\\t(\\n\\t\\t\\tbytes memory authenticatorData,\\n\\t\\t\\tbytes1 authenticatorDataFlagMask,\\n\\t\\t\\tbytes memory clientData,\\n\\t\\t\\tstring memory clientChallenge,\\n\\t\\t\\tuint clientChallengeDataOffset,\\n\\t\\t\\tuint[2] memory rs\\n\\t\\t) = abi.decode(\\n\\t\\t\\t\\t_signature,\\n\\t\\t\\t\\t(bytes, bytes1, bytes, string, uint, uint[2])\\n\\t\\t\\t);\\n\\n\\t\\treturn (\\n\\t\\t\\tauthenticatorData,\\n\\t\\t\\tauthenticatorDataFlagMask,\\n\\t\\t\\tclientData,\\n\\t\\t\\tclientChallenge,\\n\\t\\t\\tclientChallengeDataOffset,\\n\\t\\t\\trs\\n\\t\\t);\\n\\t}\\n\\n\\t// function decodeSignature(\\n\\t// \\tbytes memory _signature\\n\\t// ) public pure returns (bytes memory) {\\n\\t// \\tbytes memory authenticatorData = abi.decode(_signature, (bytes));\\n\\n\\t// \\treturn (authenticatorData);\\n\\t// }\\n\\n\\tfunction getChallenge(\\n\\t\\tbytes memory _signature\\n\\t) public pure returns (string memory) {\\n\\t\\t(, , , string memory clientChallenge, , ) = decodeSignature(_signature);\\n\\t\\treturn clientChallenge;\\n\\t}\\n}\",\"keccak256\":\"0x9d4427f5588a87bdcc599f25a1ecfa7a7a113e824a8b4bd7efe1f9ad60da322a\",\"license\":\"Apache-2.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506117a7806100206000396000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806372fb4a14116100a2578063c30cfa2d11610071578063c30cfa2d1461023b578063c80edca41461024e578063e022d77c14610261578063f214aba014610274578063fb9b38be1461028757600080fd5b806372fb4a14146101fa5780637cde65e51461020d5780637ec8da8d1461022057806384dfba461461023357600080fd5b806314c67060116100de57806314c6706014610193578063675ca043146101b4578063713eca28146101c757806372bf0e65146101e757600080fd5b806304e960d71461011057806309d3ef31146101385780630b0dbcfa14610160578063129adf2814610173575b600080fd5b61012361011e366004611196565b6102ac565b60405190151581526020015b60405180910390f35b61014b6101463660046111d4565b61044d565b6040805192835260208301919091520161012f565b61012361016e3660046111d4565b61047c565b610186610181366004611274565b61056e565b60405161012f9190611301565b60006001815b6040805193845260208401929092529082015260600161012f565b61014b6101c2366004611314565b610588565b6101da6101d5366004611340565b6105d8565b60405161012f9190611372565b6101236101f53660046113bc565b610609565b61014b610208366004611314565b610872565b61012361021b3660046113bc565b610942565b6101da61022e3660046111d4565b61097e565b60008061014b565b6101236102493660046111d4565b6109d7565b61019961025c366004611314565b6109fb565b61014b61026f366004611340565b610c3a565b610199610282366004611487565b610c6f565b61029a610295366004611274565b610d74565b60405161012f969594939291906114ca565b815160009015806102cc5750825160008051602061175283398151915211155b806102d957506020830151155b156102e657506000610446565b815160208301516102f7919061047c565b61030357506000610446565b6000808080806103288860016020020151600080516020611752833981519152610dcf565b90506103867f6b17d1f2e12c4247f8bce6e563a440f277037d812deb33a0f4a13945d898c2967f4fe342e2fe1a7f9b8ee7eb4a7c0f9e162bce33576b315ececbb6406837bf51f5600080516020611752833981519152848d09610872565b885160208a01518b519398509195506103b49290919060008051602061175283398151915290859009610872565b909450915060006103c7868587866105d8565b60408101519091506000036103e55760009650505050505050610446565b60006104068260026020020151600160601b63ffffffff60c01b0319610dcf565b9050600160601b63ffffffff60c01b0319808283098351098a5190915061043b6000805160206117528339815191528361157a565b149750505050505050505b9392505050565b600080600061045e858560016109fb565b91965094509050610470858583610588565b92509250509250929050565b60008215806104985750600160601b63ffffffff60c01b031983145b806104a1575081155b806104b95750600160601b63ffffffff60c01b031982145b156104c657506000610568565b6000600160601b63ffffffff60c01b031983840990506000600160601b63ffffffff60c01b031985600160601b63ffffffff60c01b0319878809099050600160601b63ffffffff60c01b0319806bfffffffffffffffffffffffd63ffffffff60c01b0319870982089050600160601b63ffffffff60c01b03197f5ac635d8aa3a93e7b3ebbd55769886bc651d06b0cc53b0f63bce3c3e27d2604b820890501490505b92915050565b6060600061057b83610d74565b5090979650505050505050565b60008060006105a584600160601b63ffffffff60c01b0319610dcf565b9050600160601b63ffffffff60c01b03198187099250600160601b63ffffffff60c01b0319818609915050935093915050565b6105e061109a565b6000806105ef87878787610c3a565b90925090506105fe828261097e565b979650505050505050565b6000866001600160f81b031916878960208151811061062a5761062a61154e565b0160200151166001600160f81b0319161461065857604051637e49a3c960e11b815260040160405180910390fd5b6000855167ffffffffffffffff811115610674576106746110d6565b6040519080825280601f01601f19166020018201604052801561069e576020820181803683370190505b5090506106b087868351846000610e63565b50806040516020016106c2919061159c565b60405160208183030381529060405280519060200120866040516020016106e9919061159c565b604051602081830303815290604052805190602001201461071d5760405163ebab5d2960e01b815260040160405180910390fd5b60008951602061072d91906115b8565b67ffffffffffffffff811115610745576107456110d6565b6040519080825280601f01601f19166020018201604052801561076f576020820181803683370190505b5090506107828a60008c51846000610e63565b50610803600289604051610796919061159c565b602060405180830381855afa1580156107b3573d6000803e3d6000fd5b5050506040513d601f19601f820116820180604052508101906107d691906115d9565b6040516020016107e891815260200190565b60405160208183030381529060405260006020848e51610e63565b506000600282604051610816919061159c565b602060405180830381855afa158015610833573d6000803e3d6000fd5b5050506040513d601f19601f8201168201806040525081019061085691906115d9565b90506108638187876102ac565b9b9a5050505050505050505050565b6000808260000361088a576000805b9150915061093a565b8260010361089c57508390508261093a565b826002036108ae57610881858561044d565b508390508281816001806108c360028861157a565b6000036108d257600094508495505b600187901c96505b8615610926576108eb8484846109fb565b919550935091506108fd60028861157a565b60010361091a57610912848484898986610c6f565b919750955090505b600187901c96506108da565b610931868683610588565b95509550505050505b935093915050565b600061095388888888888888610609565b61097057604051638baa579f60e01b815260040160405180910390fd5b506001979650505050505050565b61098661109a565b600160601b63ffffffff60c01b0319600160000860408201819052600160601b63ffffffff60c01b031990840981526040810151600160601b63ffffffff60c01b0319908309602082015292915050565b6000821580156109e5575081155b156109f257506001610568565b50600092915050565b6000806000806000806000610a108a8a6109d7565b15610a2957600060018196509650965050505050610c31565b600160601b63ffffffff60c01b0319888a099250600160601b63ffffffff60c01b0319600284099250600160601b63ffffffff60c01b03198a84099150600160601b63ffffffff60c01b03198983099150600160601b63ffffffff60c01b0319600283099150600160601b63ffffffff60c01b03198a8b099950600160601b63ffffffff60c01b031960038b099350600160601b63ffffffff60c01b03198889099750600160601b63ffffffff60c01b03196bfffffffffffffffffffffffd63ffffffff60c01b031989099750600160601b63ffffffff60c01b03198885089350600160601b63ffffffff60c01b03198485099050600160601b63ffffffff60c01b0319826002099950600160601b63ffffffff60c01b03198a600160601b63ffffffff60c01b03190382089050600160601b63ffffffff60c01b031981600160601b63ffffffff60c01b03190383089950600160601b63ffffffff60c01b03198a85099950600160601b63ffffffff60c01b0319838a099850600160601b63ffffffff60c01b0319898a099850600160601b63ffffffff60c01b0319896002099850600160601b63ffffffff60c01b031989600160601b63ffffffff60c01b0319038b089550600160601b63ffffffff60c01b03198184099650600160601b63ffffffff60c01b03198384099450600160601b63ffffffff60c01b03198386099450505050505b93509350939050565b6000806000610c4f8787600188886001610c6f565b91985096509050610c61878783610588565b925092505094509492505050565b6000806000806000806000610c848d8d6109d7565b15610c9b5789898996509650965050505050610d68565b610ca58a8a6109d7565b15610cbc578c8c8c96509650965050505050610d68565b600160601b63ffffffff60c01b0319888d099350600160601b63ffffffff60c01b03198b8a099250600160601b63ffffffff60c01b0319888e099150600160601b63ffffffff60c01b03198b8b099050808203610d3e57828403610d3457610d258d8d8d6109fb565b96509650965050505050610d68565b6000600181610d25565b610d5c600160601b63ffffffff60c01b0319898d0983838688610ef1565b91985096509450505050505b96509650969350505050565b606060006060806000610d856110b8565b6000806000806000808c806020019051810190610da29190611687565b9550955095509550955095508585858585859b509b509b509b509b509b5050505050505091939550919395565b6000821580610ddd57508183145b80610de6575081155b15610df357506000610568565b81831115610e0857610e05828461157a565b92505b600060018385835b8115610e3f57818381610e2557610e25611564565b949594048581029094039391928383029003919050610e10565b6000851215610e575750505090830191506105689050565b50929695505050505050565b60606000610e7183866115b8565b90508084511015610e8157600080fd5b6000610e8e8760206115b8565b90506000610e9d8560206115b8565b90505b86610eac8960206115b8565b610eb691906115b8565b821015610ee4578882015186820152610ed06020836115b8565b9150610edd6020826115b8565b9050610ea0565b5093979650505050505050565b600080808080808080600160601b63ffffffff60c01b03198a600160601b63ffffffff60c01b0319038a089050600160601b63ffffffff60c01b03198b600160601b63ffffffff60c01b0319038d089450600160601b63ffffffff60c01b03198586099350600160601b63ffffffff60c01b03198182099150600160601b63ffffffff60c01b03198d83099150600160601b63ffffffff60c01b03198c8c089a50600160601b63ffffffff60c01b0319848c099a50600160601b63ffffffff60c01b03198b600160601b63ffffffff60c01b03190383089150600160601b63ffffffff60c01b03198286099750600160601b63ffffffff60c01b03198585099250600160601b63ffffffff60c01b0319848d099b50600160601b63ffffffff60c01b031982600160601b63ffffffff60c01b0319038d089b50600160601b63ffffffff60c01b03198c82099050600160601b63ffffffff60c01b0319838a099850600160601b63ffffffff60c01b031989600160601b63ffffffff60c01b03190382089650600160601b63ffffffff60c01b03198d840995505050505050955095509592505050565b60405180606001604052806003906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561110f5761110f6110d6565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561113e5761113e6110d6565b604052919050565b600082601f83011261115757600080fd5b61115f6110ec565b80604084018581111561117157600080fd5b845b8181101561118b578035845260209384019301611173565b509095945050505050565b600080600060a084860312156111ab57600080fd5b833592506111bc8560208601611146565b91506111cb8560608601611146565b90509250925092565b600080604083850312156111e757600080fd5b50508035926020909101359150565b600067ffffffffffffffff821115611210576112106110d6565b50601f01601f191660200190565b600082601f83011261122f57600080fd5b813561124261123d826111f6565b611115565b81815284602083860101111561125757600080fd5b816020850160208301376000918101602001919091529392505050565b60006020828403121561128657600080fd5b813567ffffffffffffffff81111561129d57600080fd5b6112a98482850161121e565b949350505050565b60005b838110156112cc5781810151838201526020016112b4565b50506000910152565b600081518084526112ed8160208601602086016112b1565b601f01601f19169290920160200192915050565b60208152600061044660208301846112d5565b60008060006060848603121561132957600080fd5b505081359360208301359350604090920135919050565b6000806000806080858703121561135657600080fd5b5050823594602084013594506040840135936060013592509050565b60608101818360005b600381101561139a57815183526020928301929091019060010161137b565b50505092915050565b6001600160f81b0319811681146113b957600080fd5b50565b6000806000806000806000610120888a0312156113d857600080fd5b873567ffffffffffffffff808211156113f057600080fd5b6113fc8b838c0161121e565b985060208a0135915061140e826113a3565b9096506040890135908082111561142457600080fd5b6114308b838c0161121e565b965060608a013591508082111561144657600080fd5b506114538a828b0161121e565b9450506080880135925061146a8960a08a01611146565b91506114798960e08a01611146565b905092959891949750929550565b60008060008060008060c087890312156114a057600080fd5b505084359660208601359650604086013595606081013595506080810135945060a0013592509050565b60e0815260006114dd60e08301896112d5565b602060ff60f81b89168185015283820360408501526114fc82896112d5565b9150838203606085015261151082886112d5565b925085608085015260a0840191508460005b600281101561153f57815184529282019290820190600101611522565b50505050979650505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261159757634e487b7160e01b600052601260045260246000fd5b500690565b600082516115ae8184602087016112b1565b9190910192915050565b8082018082111561056857634e487b7160e01b600052601160045260246000fd5b6000602082840312156115eb57600080fd5b5051919050565b600061160061123d846111f6565b905082815283838301111561161457600080fd5b6104468360208301846112b1565b600082601f83011261163357600080fd5b610446838351602085016115f2565b600082601f83011261165357600080fd5b61165b6110ec565b80604084018581111561166d57600080fd5b845b8181101561118b57805184526020938401930161166f565b60008060008060008060e087890312156116a057600080fd5b865167ffffffffffffffff808211156116b857600080fd5b6116c48a838b01611622565b9750602089015191506116d6826113a3565b6040890151919650808211156116eb57600080fd5b6116f78a838b01611622565b9550606089015191508082111561170d57600080fd5b508701601f8101891361171f57600080fd5b61172e898251602084016115f2565b935050608087015191506117458860a08901611642565b9050929550929550929556feffffffff00000000ffffffffffffffffbce6faada7179e84f3b9cac2fc632551a2646970667358221220efe9f37adbb4cd63907f83f0e301e15adabaacafdd657b9b998a8b3b677432fb64736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,uint256,uint256,uint256)": {
        "details": "Add two elliptic curve points in affine coordinates."
      },
      "addAndReturnProjectivePoint(uint256,uint256,uint256,uint256)": {
        "details": "Add two points in affine coordinates and return projective point."
      },
      "addProj(uint256,uint256,uint256,uint256,uint256,uint256)": {
        "details": "Add two elliptic curve points in projective coordinates. See https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates"
      },
      "isOnCurve(uint256,uint256)": {
        "details": "Check if a point in affine coordinates is on the curve."
      },
      "isZeroCurve(uint256,uint256)": {
        "details": "Check if the curve is the zero curve."
      },
      "multiplyScalar(uint256,uint256,uint256)": {
        "details": "Multiply an elliptic curve point by a scalar."
      },
      "toAffinePoint(uint256,uint256,uint256)": {
        "details": "Transform from projective to affine coordinates."
      },
      "toProjectivePoint(uint256,uint256)": {
        "details": "Transform affine coordinates into projective coordinates."
      },
      "twice(uint256,uint256)": {
        "details": "Double an elliptic curve point in affine coordinates."
      },
      "twiceProj(uint256,uint256,uint256)": {
        "details": "Double an elliptic curve point in projective coordinates. See https://www.nayuki.io/page/elliptic-curve-point-addition-in-projective-coordinates"
      },
      "validateSignature(bytes32,uint256[2],uint256[2])": {
        "details": "Validate combination of message, signature, and public key."
      },
      "zeroAffine()": {
        "details": "Return the zero curve in affine coordinates."
      },
      "zeroProj()": {
        "details": "Return the zero curve in projective coordinates."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}